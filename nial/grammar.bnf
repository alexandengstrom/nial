  <program>            ::=    <statements>

  <statements>         ::=    <statement> { <statements> } |
                              empty

  <loop statements>    ::=    ( <statement> | ``break'' | ``next'' ) { <loop statements> } |
                              empty

  <func statements>    ::=    ( <statement> | ``return'' [expr] ) { <func statements> } |
                              empty
                              
  <statement>          ::=    <control structure>
                              <type definition>
                              <utility definition>
                              <func definition>
                              <io>
                              <file read>
                              <try block>
                              <import>
                              <expr>
                              <comment>
                              
  <import>             ::=    ``use'' <expr>
                              
  <try block>          ::=    ``try'' <statements>
                              { ``catch'' <type identifier> <statements> }
                              [ ``else'' <statements> ]
                              ``stop''
                              
  <file read>          ::=    ``load'' <expr> ``into'' <identifier>
                              
  <io>                 ::=    <input> | <output>

  <output>             ::=    ``display'' <expr>

  <input>              ::=    ``let user assign'' <identifier>
  
  <control structure>  ::=    <range loop> |
                              <list loop> |
                              <while loop> |
                              <if statement>

  <range loop>         ::=   ``count'' <identifier> ``from'' <expression> ``to'' <expression>
                             <loop statements>
                             ``stop''

  <list loop>          ::=   ``for every'' { ``copy'' }  <identifier> ``in'' <expr>
                             <loop statements>
                             ``stop''

  <while loop>         ::=   ``while'' <logical expression> <loop statements> ``stop''                           
                             
  <if statement>       ::=   ``if'' <condition> ``then'' <loop statements>
                             { ``else if'' <condition> ``then'' <statements> }
                             [ ``else'' <statements> ]
                             ``stop''

  <type definition>    ::=   ``define type'' <type identifier>
                             [``extend'' <type identifier>]
                             {var assign}
                             ``define method'' ``constructor'' ``(`` <params> ``)''
                             <func statements> ``stop''
                             {method definition}
                             ``stop''

  <utility definition> ::=   ``define utility'' <type identifier>
                             { <const assign> } { <method definition> } ``stop''

  
  <method definition>  ::=   ``define method'' <identifier> ``(`` <params> ``)''
                             <func statements> ``stop''


  <func definition>    ::=   ``define function'' <identifier> ``(`` <params> ``)''
                             <func statements> ``stop''
  

  <expr>              ::=    <expr> <assign op> <log expr> |
                             <var assign>
                             <log expr>

  <var assign>        ::=    <identifier> ``='' <expr>

  <const assign>      ::=    <constant> ``='' <expr>
  
  <assign op>         ::=    ``+='' | ``-='' | ``*='' | ``/=''

  <log expr>          ::=    <com expr> <log op> <log expr> |
                             ``not'' <log expr> |
                             <com expr>

  <log op>            ::=    ``and'' | ``or''         

  <com expr>          ::=     <arit expr> <com op> <com expr> |
                              <arit expr>

  <com op>            ::=     ``>'' | ``>='' | ``<'' | ``<='' | ``=='' | ``!=''

  <arit expr>         ::=     <term> <arit op> <arit expr> |
                              <term>

  <arit op>           ::=     ``+'' | ``-'' 

  <term>              ::=     <factor> <term op> <term> |
                              <factor>

  <term op>           ::=     ``*'' | ``/'' | ``%"

  <factor>            ::=    <atom> | ``(`` <expr> ``)''

  <atom>              ::=    <identifier> | <constant> | <number> | <text> | <bool> | <null> |
                             <list> | <dict> | <type init> | <func call> | <method call> |
                             <anon func> | <attr_access>

  <type init>         ::=    ``create'' <type identifier> ``(`` <args> ``)''
                             
  <func call>         ::=    ``call'' ( <identifier> | <anon func> ) ``(`` <args> ``)''

  <anon func>         ::=    ``|'' <params> ``|'' <expr> ``|''

  <method call>       ::=    ``call'' ( <expr> | <type identifier> )
                             ( ``.'' <identifier> ``(`` <args> ``)'' ) +
  
  <list>              ::=    ``[`` <args> ``]''                        

  <params>            ::=    <identifier> { <params> } |
                             empty

  <param>             ::=    ``,'' <identifier>		     

  <args>              ::=    <expr> { <arg> } |
                             empty

  <arg>               ::=    ``,'' <expr>

  <dict>              ::=    ``{`` <dict entries> ``}''

  <dict entries>      ::=    <expr> ``:'' <expr> { <dict entry> } |
                             empty

  <dict entry>        ::=    ``,'' <expr> ``:'' <expr>
  
  <constant>          ::=    /[A-Z]{2}[A-Z_0-9]*\b/
                            
  <type identifier>   ::=    /[A-Z][\w_]*/
  
  <identifier>        ::=    /[a-z][\w_]*/

  <number>            ::=    /[0-9]+/ | /[0-9]+\.[0-9]+/

  <text>              ::=    /"(?:\\.|[^\\"])*"/

  <bool>              ::=    ``True'' | ``False''                          

  <null>              ::=    ``Null''

  <comment>           ::=    ``#'' /.*/ ``\n'' | ``$'' /[.*|\n]*/ ``$''